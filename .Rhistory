}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
}
comparisons
comps
offset <- c(NA, offset)[1:length(offset)]
offset
this_comp <- list(c(comps[j], offset[j]))
this_comp
j<-1
comps[1]
comps <- offset <- unlevel(unname(unlist(unique(dplyr::select(data, x)))))
comps[[1]]
this_comp <- list(c(comps[[j]], offset[[j]]))
this_comp
offset
comps <- offset <- unname(unlist(unique(dplyr::select(data, x))))
comps <- offset <- unname(unlist(unique(dplyr::select(ToothGrowth, supp))))
offset
offset <- c(NA, [[offset]])[1:length(offset)]
comps <- offset <- droplevels(unname(unlist(unique(dplyr::select(data, x)))))
comps <- offset <- droplevels(unname(unlist(unique(dplyr::select(ToothGrowth, supp)))))
comparisons <- list() #Empty comparisons list
offset <- c(NA, offset)[1:length(offset)]
offset
comps
test <- droplevels(ToothGrowth$supp)
comps <- offset <- unname(unlist(unique(dplyr::select(test, supp))))
test
unname(unlist(unique(select(ToothGrowth, supp))))
unique(select(ToothGrowth, supp))
unlist(unique(select(ToothGrowth, supp)))
getLevels(unlist(unique(select(ToothGrowth, supp))))
get_levels(unlist(unique(select(ToothGrowth, supp))))
document()
library(devtools)
load_all()
document()
check()
check()
load_all()
library(devtools)
devtools::load_all(".")
check()
check()
check()
droplevels(ToothGrowth, supp)
ToothGrowth %>%
dplyr::mutate(supp = as.factor({{ supp }}))
supp = substitude(supp)
supp = substitute(supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param groups The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- unname(unlist(unique(dplyr::select(data, x))))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[[j]], offset[[j]]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
return(comparisons)
}
comparison_maker(ToothGrowth, supp)
ToothGrowth %>%
dplyr::mutate(supp = as.factor(supp))
ToothGrowth <- ToothGrowth %>%
dplyr::mutate(supp = as.factor(supp))
unique(ToothGrowth, supp)
unique(ToothGrowth$supp)
droplevels(unique(ToothGrowth$supp))
list(unique(ToothGrowth$supp))
as.character(unique(ToothGrowth$supp))
comps <- offset <- as.character(unique(ToothGrowth$supp))
comparisons <- list() #Empty comparisons list
length(comps)
offset <- c(NA, offset)[1:length(offset)]
offset
comps
is.na(offset[1])
is.na(offset[2])
this_comp <- list(c(comps[[2]], offset[[2]]))
comparisons <- c(comps, this_comp)
comparisons
c(comps[2], offset[2])
c(comps[[2]], offset[2])
comparisons <- list() #Empty comparisons list
comparisons <- c(comparisons, this_comp)
this_comp <- list(c(comps[j], offset[j]))
comparisons
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param groups The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
return(comparisons)
}
comparison_maker(ToothGrowth, supp)
comparisons <- c(comparisons, this_comp)
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
comparison_maker(ToothGrowth, supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param groups The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
}
comparison_maker(ToothGrowth, supp)
View(comparisons)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param groups The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
print(comparisons)
}
comparison_maker(ToothGrowth, supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param groups The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
print(comparisons)
}
comparison_maker(ToothGrowth, supp)
View(comparisons)
load_all()
rm()
load_all()
load_all(0)
library(devtools)
load_all()
check()
check()
check()
check()
check()
check()
check()
use_package('multcomp')
check()
build_rmd("vignettes/comparison_maker.Rmd")
devtools::build_rmd("vignettes/comparison_maker.Rmd")
use_vignette("comparison_maker")
library(ggls)
library(ggls)
library(ggls)
library(ggls)
ToothGrowth <-  ToothGrowth %>%
dplyr::mutate(supp = as.factor( supp ))
comps <- offset <- as.character(unique(ToothGrowth$supp))
length(comps)
offset <- c(NA, offset)[1:length(offset)]
offset
length(offset)
this_comp <- list(c(comps[2], offset[2]))
comparisons <- c(comparisons, this_comp)
comparisons <- list() #Empty comparisons list
comparisons <- c(comparisons, this_comp)
comparisons
list(comparisons)
comparisons
print(comparisons)
comparisons[1]
comparisons[[1]]
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
comparisons[[1]]
}
comparison_maker(ToothGrowth, supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
comparisons[[]]
}
comparison_maker(ToothGrowth, supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
comparisons = comparisons
}
comparisons
}
comparison_maker(ToothGrowth, supp)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
comps <- offset <- as.character(unique(dplyr::select(data, x)))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
print(comparisons)
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
print(comparisons)
}
}
comparison_maker(ToothGrowth, supp)
omps <- offset <- as.character(unique(dplyr::select(ToothGrowth, supp)))
comps <- offset <- as.character(unique(dplyr::select(ToothGrowth, supp)))
comps
offset
as.character(unique(dplyr::select(ToothGrowth, supp)))
(unique(dplyr::select(ToothGrowth, supp)))
(unique(ToothGrowth$supp)
)
#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
#   comps <- offset <- as.character(unique(dplyr::select(data, x)))
comps <- offset <- as.character(unique(data$x))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
print(comparisons)
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
print(comparisons)
}
}
comparison_maker(ToothGrowth, supp)
library(devtools)
load_all()
document()
load_all()
document()
load_all()
check()
load_all()
document()
load_all()
check()
