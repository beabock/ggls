#' Comparison Maker
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
#   comps <- offset <- as.character(unique(dplyr::select(data, x)))
comps <- offset <- as.character(unique(data$x))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
return(comparisons)
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
return(comparisons)
}
}
comparison_maker(ToothGrowth, supp)
library(magrittr)
#'
#' @param data The dataset you are inputting
#' @param x The column name that contains the groups you are wanting to compare
#' @param comparisons Default is "all". If you do not want to compare all variables to each other within your grouping column, then you can specify which comparisons you want instead.
#'
#' @return comparisons
#' @import magrittr
#' @export
#'
#' @examples comparison_maker(ToothGrowth, supp)
comparison_maker <- function(data,
x,
comparisons = "all"){
# x <- enquo(x) come back to this
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}))
if (comparisons == "all"){
#   comps <- offset <- as.character(unique(dplyr::select(data, x)))
comps <- offset <- as.character(unique(data$x))
comparisons <- list() #Empty comparisons list
for (i in 1:length(comps)){
offset <- c(NA, offset)[1:length(offset)]
for (j in 1:length(offset)){
if (!is.na(offset[j])){
this_comp <- list(c(comps[j], offset[j]))
comparisons <- c(comparisons, this_comp)
} #close the if statement
}#Close the offset for loop
} #close the comparisons for loop
return(comparisons)
}#close the if comparisons == all loop
else { #if user does not choose "all" for comparisons and instead provides comparisons
return(comparisons)
}
}
comparison_maker(ToothGrowth, supp)
#'
#' @return out
#' @import magrittr
#' @import dplyr
#' @import ggplot2
#' @importFrom rstatix levene_test shapiro_test
#' @importFrom stats aov
#' @export
#'
#' @examples test_assumptions(ToothGrowth, supp, len, dose, alpha = 0.01)
test_assumptions <- function(data,
x, #not in quotes
y, #not in quotes
groups = NULL, #not in quotes
alpha = 0.05,
plots = FALSE #Displaying diagnostic plots
){
out <- matrix(nrow = 2, ncol = 2)
colnames(out) <- c("Assumption", "Decision")
data <-  data %>%
dplyr::mutate(x = as.factor({{ x }}),
y = {{ y }})
groups = substitute(groups)
# ds <- prep_data(data, x, y, groups)
#Data prepping steps now in prep_data function, need to figure that out better
if (!is.null(groups)){
#  data <- prep_data(data, x, y, groups)
data <- data %>%
dplyr::mutate(groups = as.factor({{ groups }}))
}
#  else {
#    data <- prep_data(data, x, y)
#  }
st <- data %>% #shapiro test for normality
dplyr::group_by(x)%>%
rstatix::shapiro_test(y)
if (any(st$p < alpha)){
out[1,] <- c("Shapiro Normality", "Fail")
print("Shapiro Test indicates non-normal distribution in the data")
}
else {
out[1,] <- c("Shapiro Normality", "Pass")
print("Shapiro Test indicates normal distribution in the data")
}
#Show a plot of the distribution
if (plots==T){
dist <- ggplot2::ggplot(data, aes(sample = y))+
stat_qq()+
stat_qq_line()+
labs(title = "Normal Probability Plot")
print(dist)
}
#Testing equal variances for ungrouped data
groups <- substitute(groups)
if (is.null(groups)){
#for ungrouped data
vt <- data %>%
rstatix::levene_test(formula = y ~ x)
if (vt$p > alpha){
out[2,] <- c("Levene Variance", "Pass")
print("Variance Test indicates equal variances in the data")
}
else {
out[2,] <- c("Levene Variance", "Fail")
print("Variance Test indicates unequal variances in the data")
}
data.aov <- stats::aov(y~x, data = data)
if (plots == T){
print(plot(data.aov, 1)) #Look at residuals
} #plots
}
else { #grouped data
vt <- data %>%
dplyr::group_by(groups)%>%
rstatix::levene_test(formula = y ~ x)
# vt <- leveneTest(formula = )
if (any(vt$p < alpha)){
out[2,] <- c("Levene Variance", "Fail")
print("Variance Test indicates unequal variances in the data")
print(vt)
}
else {
out[2,] <- c("Levene Variance", "Pass")
print("Variance Test indicates equal variances in the data")
}
if (plots == T){
data.aov <- stats::aov(y~x*groups, data = data)
print(plot(data.aov, 1))
} #plots
}
return(out)
}
test_assumptions(ToothGrowth, supp, len, dose, alpha = 0.01)
load_all()
library(devtools)
load_all()
document()
test()
build_readme()
build_vignettes()
library(pkgdown)
pkgdown::build_site_github_pages()
document()
document()
pkgdown::build_site_github_pages()
pkgdown::deploy_to_branch()
pkgdown::deploy_to_branch()
library(pkgdown)
deploy_to_branch('')
deploy_to_branch()
pkgdown::build_site''
pkgdown::build_site_github_pages()
